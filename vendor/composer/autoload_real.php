<?php

use Composer\Autoload\ClassLoader;
use Composer\Autoload\ComposerStaticInitbe31a838b23c816665ffea1ea8e0b766;

/**
 *
 * Simple password manager written in PHP with Bootstrap and PDO database connections
 *
 *  File name: autoload_real.php
 *  Last Modified: 29.12.22 г., 19:47 ч.
 *
 *  @link          https://blacktiehost.com
 *  @since         1.0.0
 *  @version       2.2.0
 *  @author        Milen Karaganski <milen@blacktiehost.com>
 *
 *  @license       GPL-3.0+
 *  @license       http://www.gnu.org/licenses/gpl-3.0.txt
 *  @copyright     Copyright (c)  2020 - 2022 blacktiehost.com
 *
 */

// autoload_real.php @generated by Composer

class ComposerAutoloaderInitbe31a838b23c816665ffea1ea8e0b766
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    /**
     * @return ClassLoader
     */
    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        require __DIR__ . '/platform_check.php';

        spl_autoload_register(array('ComposerAutoloaderInitbe31a838b23c816665ffea1ea8e0b766', 'loadClassLoader'), true, true);
        self::$loader = $loader = new ClassLoader(dirname(__DIR__));
        spl_autoload_unregister(array('ComposerAutoloaderInitbe31a838b23c816665ffea1ea8e0b766', 'loadClassLoader'));

        require __DIR__ . '/autoload_static.php';
        call_user_func(ComposerStaticInitbe31a838b23c816665ffea1ea8e0b766::getInitializer($loader));

        $loader->register(true);

        $filesToLoad = ComposerStaticInitbe31a838b23c816665ffea1ea8e0b766::$files;
        $requireFile = static function ($fileIdentifier, $file) {
            if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
                $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;

                require $file;
            }
        };
        foreach ($filesToLoad as $fileIdentifier => $file) {
            ($requireFile)($fileIdentifier, $file);
        }

        return $loader;
    }
}
